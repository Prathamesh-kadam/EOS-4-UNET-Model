import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import tifffile as tiff
from sklearn.metrics import confusion_matrix
import seaborn as sns

def display(display_list):
    fig, axs = plt.subplots(nrows=1, ncols=len(display_list), figsize=(15, 6))
    title = ['Input Image', 'True Mask', 'Predicted Mask']
    cmap = cm.get_cmap('gray') 

    for i in range(len(display_list)):
        axs[i].set_title(title[i])
        if i == 0:
            axs[i].imshow(tf.transpose(tf.squeeze(display_list[i]), perm=[1, 0]), cmap=cmap)
        else:
            msk = axs[i].imshow(display_list[i], cmap=cmap)
        axs[i].axis('off')

    cbar = fig.colorbar(msk, ax=axs)
    plt.show()

x_train_iter = iter(x_train)
z_train_iter = iter(z_train)

image = next(x_train_iter)
mask = next(z_train_iter)


plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(x_train[0].squeeze(), cmap='gray')
plt.title('Input Image')
plt.subplot(1, 2, 2)
plt.imshow(z_train[0].squeeze(), cmap='gray')
plt.title('Corresponding Mask')
plt.show()

pred = model.predict(x_test)

print(model_history.history.keys())


plt.plot(model_history.history['categorical_accuracy'], label='train_acc')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training Accuracy')
plt.show()

plt.plot(model_history.history['loss'], label='train_loss')
plt.legend()
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training Loss')
plt.show()

random_img_index = random.randint(0, len(x_test) - 1)
original_img = x_test[random_img_index]

input_img = np.expand_dims(original_img, axis=0)
input_img_normalized = input_img / 255.0  # Normalize input image

predicted_mask = model.predict(input_img_normalized)
#print(predicted_mask)
print(predicted_mask.shape)


def get_cm(model, x_val):
    y_pred = model.predict(x_val)
    y_pred = np.argmax(y_pred, axis=-1)
    y_true = np.argmax(z_test, axis=-1)
    cm = confusion_matrix(y_true.ravel(), y_pred.ravel(), labels=range(n_colors))
    return cm

val_cm = get_cm(model, x_test)

plt.figure(figsize=(12, 8))
sns.heatmap(val_cm, annot=True, fmt="d", cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()



# Display the image and mask
display([image, mask])
